dis List[T] {
    Nil,
    Cons(x: T, xs: List[T])
}

dis Pair[T, U] {
    Pair(fst: T, snd: U)
}

dis Nat {
    Zero,
    Succ(n: Nat)
}

dis Bool {
    True,
    False
}

fun less(a: Nat, b: Nat) -> Bool {
    let p = Pair[Nat, Nat]::Pair a b;
    ret fit p {
        Pair _ Zero => Bool::False,
        Pair Zero _ => Bool::True,
        Pair (Succ _) (Succ _) => less p.fst.n p.snd.n
    };
}

fun len(xs: List[Nat]) -> Nat {
    ret fit xs {
        Nil => Nat::Zero,
        Cons _ _ => Nat::Succ (len xs.xs)
    };
}

fun fmap[T, U](f: T -> U, xs: List[T]) -> List[U] {
    ret fit xs {
        Nil => List[U]::Nil,
        Cons _ _ => List[U]::Cons (f xs.x) (fmap f xs.xs)
    };
}

fun mapPair[T, U](f: T -> U, p: Pair[T, T]::Pair) -> Pair[U, U]::Pair {
    ret Pair[U, U]::Pair (f p.fst) (f p.snd);
}

fun half[T](xs: List[T]) -> Pair[List[T], List[T]]::Pair {
    let rest = fit xs {
        Nil => Pair[List[T], List[T]]::Pair List[T]::Nil List[T]::Nil,
        Cons _ Nil => Pair[List[T], List[T]]::Pair xs List[T]::Nil,
        Cons _ (Cons _ _) => half xs.xs.xs
    };
    ret fit xs {
        Cons _ (Cons _ _) => Pair[List[T], List[T]]::Pair (List[T]::Cons xs.x rest.fst) (List[T]::Cons xs.xs.x rest.snd),
        _ => rest
    };
}

fun merge[T](xs: List[T], ys: List[T], less: T -> T -> Bool) -> List[T] {
    let p = Pair[List[T], List[T]]::Pair xs ys;
    ret fit p {
        Pair Nil Nil => List[T]::Nil,
        Pair Nil _ => p.snd,
        Pair _ Nil => p.fst,
        Pair (Cons _ _) (Cons _ _) => fit less p.fst.x p.snd.x {
            True => List[T]::Cons p.fst.x (merge p.fst.xs p.snd less),
            False => List[T]::Cons p.snd.x (merge p.fst p.snd.xs less)
        }
    };
}

fun sort[T](xs: List[T], less: T -> T -> Bool) -> List[T] {
    let halves = half xs;
    ret fit xs {
        Nil => List[T]::Nil,
        Cons _ Nil => xs,
        Cons _ _ => merge (sort halves.fst less) (sort halves.snd less) less,
    };
}

fun main(a: Int) -> Int {
    let zero = Nat::Zero;
    let one = Nat::Succ zero;
    let two = Nat::Succ one;
    let three = Nat::Succ two;
    let four = Nat::Succ three;
    let five = Nat::Succ four;
    let six = Nat::Succ five;
    let seven = Nat::Succ six;
    let eight = Nat::Succ seven;
    let nine = Nat::Succ eight;
    let ten = Nat::Succ nine;

    let xs = List[Nat]::Cons one 
        (List[Nat]::Cons five 
        (List[Nat]::Cons three 
        (List[Nat]::Cons seven 
        (List[Nat]::Cons three 
        (List[Nat]::Cons three 
        (List[Nat]::Cons nine 
        (List[Nat]::Cons three 
        (List[Nat]::Cons four 
        (List[Nat]::Cons three 
        (List[Nat]::Nil))))))))));
    
    ret sort[Nat] xs less;
}