dis Pair {
    Pair(fst: Nat, snd: Nat)
}

dis Nat {
    Zero,
    Succ(n: Nat)
}

dis Bool {
    True,
    False
}

fun less(a: Nat, b: Nat) -> Bool {
    let p = Pair::Pair a b;
    ret fit p {
        Pair _ Zero => Bool::False,
        Pair Zero _ => Bool::True,
        Pair (Succ _) (Succ _) => less (p.fst.n) (p.snd.n)
    };
}

fun main() -> Nat {
    ret less (Nat::Succ Nat::Zero) (Nat::Succ (Nat::Succ Nat::Zero));
}
